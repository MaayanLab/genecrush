e4102<-exprs(g4102)
e4100<-exprs(g4100)
e1<-e4102[,c(1,51)]
e2<-e4100[,c(1,2,23,24)]
View(`e1`)
View(`e2`)
View(`e4100`)
g3329 <- GDS2eSet(getGEO("GDS3329"))
e3329<-exprs(g3329)
dim(e3329)
e3329[1:5,1:5]
aml.mat <- read.table("lowrall.csv", sep=",", header=T, quote = "")    # Read in a file
aml.relapse.vec <- as.numeric(aml.mat[,1])                             # 1st col to new variable relapse
aml.mat <- aml.mat[,-(1:9)]     # Remove unnecessary columns
dim(aml.mat)
aml.mat <- t(aml.mat)           # Transpose to fit wanted shape
dim(aml.mat)
quantile (aml.mat[,1], probs=c(0, 0.25, 0.5, 0.75, 1))
t.test (aml.mat[1,1:69], aml.mat[1,70:119])
p.vec <- apply (aml.mat, 1, function (x) {t.test (x[1:69], x[70:119])$p.value})
# T-Test
source("http://bioconductor.org/biocLite.R")
biocLite("RGSEA")
library(RGSEA)
library(GEOquery)
g3329 <- GDS2eSet(getGEO("GDS3329"))
help(knn)
library(knn)
getwd()
aml.mat <- read.table("predicted_RG_probability20110428.txt", sep="\t", header=F, quote = "")
aml.mat <- read.table("predicted_RG_probability20110428.txt", sep="\t", header=F)
my.yeast <- read.table("sce00500.txt", sep="\t", header=FALSE)
View(my.yeast)
my.yeast <- read.table("mapped_RegulationTwoColumnTable_Documented_filtered_noTFTP", sep="\t", header=FALSE)
my.yeast <- read.table("mapped_RegulationTwoColumnTable_Documented_filtered_noTFTP", sep="\t", header=FALSE)
my.yeast <- read.table("mapped_RegulationTwoColumnTable_Documented_filtered_noTFTP.txt", sep="\t", header=FALSE)
head(my.yeast)
my.data <- my.data[,-c(2,4)]
my.yeast <- my.yeast[,-c(2,4)]
head(my.yeast)
my.yeast <- read.table("mapped_RegulationTwoColumnTable_Documented_filtered_noTFTP.txt", sep="\t", header=FALSE)
my.yeast <- my.yeast[,-c(1,3)]
head(my.yeast)
# Input : Pathway genes, Yeast genes(edgelist)
# Output : find rows of Yeast genes that are both from pathway genes.
# Read in the list of nodes
name.in <- file.choose()
my.data <- read.table(name.in, sep="\t", header=FALSE)
temp <- NULL
for (k in 1:nrow(my.data)) {
temp <- c(temp, substr(toString(my.data[k,1]), 1, 7))
}
my.data <- temp
# Read in the list of edge list(contain node node)
my.yeast <- read.table("mapped_RegulationTwoColumnTable_Documented_filtered_noTFTP.txt", sep="\t", header=FALSE)
my.yeast <- my.yeast[,-c(1,3)]
first.row <- NULL
second.row <- NULL
for (i in 1:dim(my.yeast)[1]) {
if (toString(my.yeast[i,1]) %in% unlist(my.data) && toString(my.yeast[i,2]) %in% unlist(my.data)) {
first.row <- c(first.row, toString(my.yeast[i,1]))
second.row <- c(second.row, toString(my.yeast[i,2]))
}
}
row <- cbind(first.row, second.row)
name.out <- gsub(pattern = ".txt", replacement = "_(modified).txt", name.in)
write.table(row, file = name.out, sep = "\t", quote = F, col.names = T, row.names=F)
name.in <- file.choose()
my.data <- read.table(name.in, sep="\t", header=FALSE)
temp <- NULL
View(my.data)
for (k in 1:nrow(my.data)) {
temp <- c(temp, substr(toString(my.data[k,1]), 1, 7))
}
my.data <- temp
my.data
my.yeast <- read.table("mapped_RegulationTwoColumnTable_Documented_filtered_noTFTP.txt", sep="\t", header=FALSE)
my.yeast <- my.yeast[,-c(1,3)]
head(my.yeast)
first.row <- NULL
second.row <- NULL
for (i in 1:dim(my.yeast)[1]) {
if (toString(my.yeast[i,1]) %in% unlist(my.data) && toString(my.yeast[i,2]) %in% unlist(my.data)) {
first.row <- c(first.row, toString(my.yeast[i,1]))
second.row <- c(second.row, toString(my.yeast[i,2]))
}
}
row <- cbind(first.row, second.row)
name.out <- gsub(pattern = ".txt", replacement = "_(modified).txt", name.in)
write.table(row, file = name.out, sep = "\t", quote = F, col.names = T, row.names=F)
my.yeast <- read.table("mapped_RegulationTwoColumnTable_Documented_filtered_noTFTP.txt", sep="\t", header=FALSE)
my.yeast <- my.yeast[,-c(1,3)]
unique(my.yeast)
# Input : Pathway genes, Yeast genes(edgelist)
# Output : find rows of Yeast genes that are both from pathway genes.
# Read in the list of nodes
name.in <- file.choose()
my.data <- read.table(name.in, sep="\t", header=FALSE)
temp <- NULL
for (k in 1:nrow(my.data)) {
temp <- c(temp, substr(toString(my.data[k,1]), 1, 7))
}
my.data <- temp
# Read in the list of edge list(contain node node)
my.yeast <- read.table("yeast_nvar20_TR_priors_selfF_minEdge0.01_above0.5.txt", sep="\t", header=FALSE)
first.row <- NULL
second.row <- NULL
for (i in 1:dim(my.yeast)[1]) {
if (toString(my.yeast[i,1]) %in% unlist(my.data) && toString(my.yeast[i,2]) %in% unlist(my.data)) {
first.row <- c(first.row, toString(my.yeast[i,1]))
second.row <- c(second.row, toString(my.yeast[i,2]))
}
}
row <- cbind(first.row, second.row)
name.out <- gsub(pattern = ".txt", replacement = "_(modified).txt", name.in)
write.table(row, file = name.out, sep = "\t", quote = F, col.names = T, row.names=F)
# Input : Pathway genes, Yeast genes(edgelist)
# Output : find rows of Yeast genes that are both from pathway genes.
# Read in the list of nodes
name.in <- file.choose()
my.data <- read.table(name.in, sep="\t", header=FALSE)
temp <- NULL
for (k in 1:nrow(my.data)) {
temp <- c(temp, substr(toString(my.data[k,1]), 1, 7))
}
my.data <- temp
# Read in the list of edge list(contain node node)
my.yeast <- read.table("yeast_nvar20_TR_priors_selfF_minEdge0.01_above0.5.txt", sep="\t", header=FALSE)
first.row <- NULL
second.row <- NULL
for (i in 1:dim(my.yeast)[1]) {
if (toString(my.yeast[i,1]) %in% unlist(my.data) && toString(my.yeast[i,2]) %in% unlist(my.data)) {
first.row <- c(first.row, toString(my.yeast[i,1]))
second.row <- c(second.row, toString(my.yeast[i,2]))
}
}
row <- cbind(first.row, second.row)
name.out <- gsub(pattern = ".txt", replacement = "_(modified).txt", name.in)
write.table(row, file = name.out, sep = "\t", quote = F, col.names = T, row.names=F)
name.in <- file.choose()
my.data <- read.table(name.in, sep="\t", header=FALSE)
temp <- NULL
for (k in 1:nrow(my.data)) {
temp <- c(temp, substr(toString(my.data[k,1]), 1, 7))
}
my.data <- temp
View(my.yeast)
my.data
my.yeast <- read.table("yeast_nvar20_TR_priors_selfF_minEdge0.01_above0.5.txt", sep="\t", header=FALSE)
first.row <- NULL
second.row <- NULL
for (i in 1:dim(my.yeast)[1]) {
if (toString(my.yeast[i,1]) %in% unlist(my.data) && toString(my.yeast[i,2]) %in% unlist(my.data)) {
first.row <- c(first.row, toString(my.yeast[i,1]))
second.row <- c(second.row, toString(my.yeast[i,2]))
}
}
row <- cbind(first.row, second.row)
name.out <- gsub(pattern = ".txt", replacement = "_(modified).txt", name.in)
write.table(row, file = name.out, sep = "\t", quote = F, col.names = T, row.names=F)
name.in <- file.choose()
my.data <- read.table(name.in, sep="\t", header=FALSE)
temp <- NULL
for (k in 1:nrow(my.data)) {
temp <- c(temp, substr(toString(my.data[k,1]), 1, 7))
}
my.data <- temp
my.yeast <- read.table("mapped_RegulationTwoColumnTable_Documented_filtered_noTFTP.txt", sep="\t", header=FALSE)
my.yeast <- read.table("yeast_nvar20_TR_priors_selfF_minEdge0.01_above0.5.txt", sep="\t", header=FALSE)
dim(my.yeast)
my.yeast <- my.yeast[,-c(1,3)]
my.yeast <- read.table("mapped_RegulationTwoColumnTable_Documented_filtered_noTFTP.txt", sep="\t", header=FALSE)
my.yeast <- my.yeast[,-c(1,3)]
dim(my.yeast)
first.row <- NULL
second.row <- NULL
for (i in 1:dim(my.yeast)[1]) {
if (toString(my.yeast[i,1]) %in% unlist(my.data) && toString(my.yeast[i,2]) %in% unlist(my.data)) {
first.row <- c(first.row, toString(my.yeast[i,1]))
second.row <- c(second.row, toString(my.yeast[i,2]))
}
}
row <- cbind(first.row, second.row)
head(row)
my.yeast
first.row <- NULL
second.row <- NULL
for (i in 1:dim(my.yeast)[1]) {
if (toString(my.yeast[i,1]) %in% unlist(my.data)) first.row <- c(first.row, toString(my.yeast[i,1]))
if (toString(my.yeast[i,2]) %in% unlist(my.data)) second.row <- c(second.row, toString(my.yeast[i,2]))
}
row <- cbind(first.row, second.row)
name.out <- gsub(pattern = ".txt", replacement = "_(modified).txt", name.in)
write.table(row, file = name.out, sep = "\t", quote = F, col.names = T, row.names=F)
read.table(file = "sce00500(K).txt")
read.table("mapped_RegulationTwoColumnTable_Documented_filtered_noTFTP.txt", sep="\t", header=FALSE)
my.data <- read.table("mapped_RegulationTwoColumnTable_Documented_filtered_noTFTP.txt", sep="\t", header=FALSE)
my.data[3]
my.data.new <- as.vector(unique(my.dadta[2]))
my.data.new <- as.vector(unique(my.data[2]))
write.table(my.data.new, file = "this.txt", sep = "\t", quote = F, col.names = T, row.names=F)
name.in <- file.choose()
my.data <- read.table(name.in, sep="\t", header=FALSE)
temp <- NULL
for (k in 1:nrow(my.data)) {
temp <- c(temp, substr(toString(my.data[k,1]), 1, 7))
}
my.data <- temp
head(my.data)
my.yeast <- read.table("mapped_RegulationTwoColumnTable_Documented_filtered_noTFTP.txt", sep="\t", header=FALSE)
my.yeast <- my.yeast[,-c(1,3)]
first.row <- NULL
second.row <- NULL
for (i in 1:dim(my.yeast)[1]) {
if (toString(my.yeast[i,1]) %in% unlist(my.data)) first.row <- c(first.row, toString(my.yeast[i,1]))
if (toString(my.yeast[i,2]) %in% unlist(my.data)) second.row <- c(second.row, toString(my.yeast[i,2]))
#if (toString(my.yeast[i,1]) %in% unlist(my.data) && toString(my.yeast[i,2]) %in% unlist(my.data)) {
#   first.row <- c(first.row, toString(my.yeast[i,1]))
#   second.row <- c(second.row, toString(my.yeast[i,2]))
#}
}
SCE.00500.K <- read.table("sce00500(K).txt", sep="\t", header=F)
Orthology.to.OC <- read.table("orthology_oc.txt", sep="\t", header=F)
OC.to.SCE <- read.table("oc_sce.txt", sep="\t", header=F)
head(Orthology.to.OC)
source("http://bioconductor.org/biocLite.R")
biocLite("networkBMA")
install.packages(c("Rserve","igraph"))
library(Rserve)
Rserve(args = '--vanilla')
getwd();
setwd("~/../../Applications/XAMPP/htdocs/2015.06.19.enrichr.game/R");
getwd();
genes <- read.table("human_mouse_gene_symbols.txt", sep="\t", header = F)
genes <- read.table("human_mouse_gene_symbols_simple_only.txt.txt", sep="\t", header = F)
genes <- read.table("human_mouse_gene_symbols_simple_only.txt", sep="\t", header = F)
genes.length
genes.length()
typeof(genes)
genes[1]
new_genes <- NULL
genes[1].length
genes[1][1]
genes[[1]]
genes[[1]][1]
genes[[1]][i].length
genes[[1]][1].length
genes[[1]][1].toString.length
genes[[1]][1].toString.length()
nchar(genes[[1]][1])
nchar(genes[[1]][1].toString)
nchar(genes[[1]][1].toString())
toString(genes[[1]][1])
nchar(toString(genes[[1]][1]))
new_genes <- NULL
for (i in 1:90079) {
if (nchar(toString(genes[[1]][i])) <= 10) {
new_genes <- c(new_genes, toString(genes[[1]][i]))
}
}
new_genes <- NULL
for (i in 1:90079) {
if (nchar(toString(genes[[1]][i])) <= 10) {
new_genes <- c(new_genes, toString(genes[[1]][i]))
}
print(i)
}
new_genes[1]
new_genes[2]
write.table("human_mouse_gene_symbols_simple_only.txt", sep="\t", header = F, quotes = F)
write.table("human_mouse_gene_symbols_simple_only.txt", sep="\t")
write.table(new_genes, "human_mouse_gene_symbols_simple_only.txt", sep="\t")
?write.table
write.table(new_genes, "human_mouse_gene_symbols_simple_only.txt", sep="\t", quotes= F, row.names = F)
write.table(new_genes, "human_mouse_gene_symbols_simple_only.txt", sep="\t", quote= F, row.names = F)
write.table(new_genes, "human_mouse_gene_symbols_simple_only.txt", sep="\t", quote= F, row.names = F, col.names = F)
length(new_genes)
length(genes)
length(genes[[1]])
255
256 * 256
60000 % 65536
80000 % 65536
80000 %% 65536
14464 %% 256
getwd();
setwd("~/../../Applications/XAMPP/htdocs/2015.06.19.enrichr.game/R");
genes <- read.table("human_mouse_gene_symbols.txt", sep="\t", header = F)
new_genes <- NULL
for (i in 1:90079) {
if (nchar(toString(genes[[1]][i])) <= 10) {
new_genes <- c(new_genes, toString(genes[[1]][i]))
}
print(i)
}
write.table(new_genes, "human_mouse_gene_symbols_simple_only.txt", sep="\t", quote= F, row.names = F, col.names = F)
length(new_genes)
length(genes[[1]])
function <- spectrum(Double w) {
if (w>1) w=1;
if (w<0) w=0;
w=w*(645-380)+380;
Double R,B,G;
if (w >= 380 && w < 440){
R = -(w - 440.) /(440. - 350.);
G = 0.0;
B = 1.0;
}
else if (w >= 440 && w < 490){
R = 0.0;
G = (w - 440.) /(490. - 440.);
B = 1.0;
}
else if (w >= 490 && w < 510){
R = 0.0;
G = 1.0;
B = (510-w) /(510. - 490.);
}
else if (w >= 510 && w < 580){
R = (w - 510.) /(580. - 510.);
G = 1.0;
B = 0.0;
}
else if (w >= 580 && w < 645){
R = 1.0;
G = -(w - 645.) /(645. - 580.);
B = 0.0;
}
else if (w >= 645 && w <= 780){
R = 1.0;
G = 0.0;
B = 0.0;
}
else{
R = 0.0;
G = 0.0;
B = 0.0;
}
return new Color(R,G,B);
}
function <- spectrum(w) {
#    if (w>1) w=1;
#    if (w<0) w=0;
#
#    w=w*(645-380)+380;
#    Double R,B,G;
#    if (w >= 380 && w < 440){
#       R = -(w - 440.) /(440. - 350.);
#       G = 0.0;
#       B = 1.0;
#    }
#    else if (w >= 440 && w < 490){
#       R = 0.0;
#       G = (w - 440.) /(490. - 440.);
#       B = 1.0;
#    }
#    else if (w >= 490 && w < 510){
#       R = 0.0;
#       G = 1.0;
#       B = (510-w) /(510. - 490.);
#    }
#    else if (w >= 510 && w < 580){
#       R = (w - 510.) /(580. - 510.);
#       G = 1.0;
#       B = 0.0;
#    }
#    else if (w >= 580 && w < 645){
#       R = 1.0;
#       G = -(w - 645.) /(645. - 580.);
#       B = 0.0;
#    }
#    else if (w >= 645 && w <= 780){
#       R = 1.0;
#       G = 0.0;
#       B = 0.0;
#    }
#    else{
#       R = 0.0;
#       G = 0.0;
#       B = 0.0;
#    }
#    return new Color(R,G,B);
}
function <- spectrum() {
spectrum <- function(w) {
#    if (w>1) w=1;
#    if (w<0) w=0;
#
#    w=w*(645-380)+380;
#    Double R,B,G;
#    if (w >= 380 && w < 440){
#       R = -(w - 440.) /(440. - 350.);
#       G = 0.0;
#       B = 1.0;
#    }
#    else if (w >= 440 && w < 490){
#       R = 0.0;
#       G = (w - 440.) /(490. - 440.);
#       B = 1.0;
#    }
#    else if (w >= 490 && w < 510){
#       R = 0.0;
#       G = 1.0;
#       B = (510-w) /(510. - 490.);
#    }
#    else if (w >= 510 && w < 580){
#       R = (w - 510.) /(580. - 510.);
#       G = 1.0;
#       B = 0.0;
#    }
#    else if (w >= 580 && w < 645){
#       R = 1.0;
#       G = -(w - 645.) /(645. - 580.);
#       B = 0.0;
#    }
#    else if (w >= 645 && w <= 780){
#       R = 1.0;
#       G = 0.0;
#       B = 0.0;
#    }
#    else{
#       R = 0.0;
#       G = 0.0;
#       B = 0.0;
#    }
#    return new Color(R,G,B);
}
spectrum <- function(Double w) {
#    if (w>1) w=1;
#    if (w<0) w=0;
#
#    w=w*(645-380)+380;
#    Double R,B,G;
#    if (w >= 380 && w < 440){
#       R = -(w - 440.) /(440. - 350.);
#       G = 0.0;
#       B = 1.0;
#    }
#    else if (w >= 440 && w < 490){
#       R = 0.0;
#       G = (w - 440.) /(490. - 440.);
#       B = 1.0;
#    }
#    else if (w >= 490 && w < 510){
#       R = 0.0;
#       G = 1.0;
#       B = (510-w) /(510. - 490.);
#    }
#    else if (w >= 510 && w < 580){
#       R = (w - 510.) /(580. - 510.);
#       G = 1.0;
#       B = 0.0;
#    }
#    else if (w >= 580 && w < 645){
#       R = 1.0;
#       G = -(w - 645.) /(645. - 580.);
#       B = 0.0;
#    }
#    else if (w >= 645 && w <= 780){
#       R = 1.0;
#       G = 0.0;
#       B = 0.0;
#    }
#    else{
#       R = 0.0;
#       G = 0.0;
#       B = 0.0;
#    }
#    return new Color(R,G,B);
}
spectrum <- function(w) {
if (w>1) w=1;
if (w<0) w=0;
w=w*(645-380)+380;
R,B,G;
if (w >= 380 && w < 440){
R = -(w - 440.) /(440. - 350.);
G = 0.0;
B = 1.0;
}
else if (w >= 440 && w < 490){
R = 0.0;
G = (w - 440.) /(490. - 440.);
B = 1.0;
}
else if (w >= 490 && w < 510){
R = 0.0;
G = 1.0;
B = (510-w) /(510. - 490.);
}
else if (w >= 510 && w < 580){
R = (w - 510.) /(580. - 510.);
G = 1.0;
B = 0.0;
}
else if (w >= 580 && w < 645){
R = 1.0;
G = -(w - 645.) /(645. - 580.);
B = 0.0;
}
else if (w >= 645 && w <= 780){
R = 1.0;
G = 0.0;
B = 0.0;
}
else{
R = 0.0;
G = 0.0;
B = 0.0;
}
return new Color(R,G,B);
}
